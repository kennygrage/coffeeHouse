<?php

function queen_attack_menu() {
    $items = array();
    $items['queen_attack'] = array(
            'title' => 'Queen Attack',
            'type' => MENU_NORMAL_ITEM,
            'access callback' => TRUE,
            'page callback' => 'drupal_get_form',
            'page arguments' => array('queen_attack_form'),
        );
    $items['queen_attack_success'] = array(
            'title' => 'Success',
            'type' => MENU_CALLBACK,
            'access callback' => TRUE,
            'page callback' => 'queen_attack_success',
        );
    $items['queen_attack_fail'] = array(
            'title' => 'Queen Cannot Attack Piece',
            'type' => MENU_CALLBACK,
            'access callback' => TRUE,
            'page callback' => 'queen_attack_fail',
        );
    return $items;
} //end queen_attack_menu()


function queen_attack_form() {
    $form = array();
    $form['queen_location'] = array(
            '#title' => 'Queen Location',
            '#type' => 'textfield',
            '#description' => t('Please enter queen coordinates. Format: (letter)(number), i.e. A6'),
            '#required' => TRUE,
            '#element_validate' => array('element_validate_coordinates'),
        );
    $form['piece_location'] = array(
            '#title' => 'Other Piece Location',
            '#type' => 'textfield',
            '#description' => t('Please enter the coordinates of the other piece. Format: (letter)(number), i.e. A6'),
            '#required' => TRUE,
            '#element_validate' => array('element_validate_coordinates'),
        );
    $form['submit'] = array(
            '#type' => 'submit',
            '#value' => 'Go',
        );
    return $form;
} //end queen_attack_form()


function queen_attack_form_submit($form, &$form_state) {
    $queen_location = $form_state['values']['queen_location'];
    $piece_location = $form_state['values']['piece_location'];
    $able_to_attack = is_able_to_attack($queen_location, $piece_location);

    if ($able_to_attack) {$form_state['redirect'] = 'queen_attack_success';}
    else {$form_state['redirect'] = 'queen_attack_fail';}
} //end queen_attack_form_submit()

function queen_attack_success() {
    return "Your queen is able to attack that piece";
} //end queen_attack_success()


function queen_attack_fail() {
    return "Your queen is NOT able to attack that piece";
} //end queen_attack_fail()


function element_validate_coordinates($element) {
    $pattern = "/^[a-h][1-8]$/i";
    $correct_format = preg_match($pattern, $element['#value']);
    if (!$correct_format) {
        form_error($element, t('Please enter valid format'));
    }
} //end element_validate_coordinates()


function is_able_to_attack($queen_location, $piece_location) {
    $diagonal_positions = [];

    //make sure the first letter is capitalized
    $make_upper = strtoupper(substr($queen_location, 0, 1));
    $number = substr($queen_location, -1);
    $queen_location = $make_upper . $number;

    //make sure the first letter is capitalized
    $make_upper = strtoupper(substr($piece_location, 0, 1));
    $number = substr($piece_location, -1);
    $piece_location = $make_upper . $number;

    if ($queen_location == $piece_location) {return false;} //two pieces can't be in the same place
    $queen_coordinate_array = str_split($queen_location);
    $piece_coordinate_array = str_split($piece_location);

    if ($queen_coordinate_array[0] == $piece_coordinate_array[0]) { //pieces are in the same column
        return true;
    }
    else if($queen_coordinate_array[1] == $piece_coordinate_array[1]) { //pieces are in the same row
        return true;
    }
    else {

        //try to move down left
        $moving_coordinate_array[0] = $queen_coordinate_array[0];
        $moving_coordinate_array[1] = $queen_coordinate_array[1];
        while ($moving_coordinate_array[0] != "A" && $moving_coordinate_array[1] != "1") {
            //moving moving_coordinate_array down left one square
            $moving_coordinate_array[0] = move($moving_coordinate_array[0], "left");
            $moving_coordinate_array[1] = move($moving_coordinate_array[1], "down");
            $moving_coordinate_string = implode("", $moving_coordinate_array);
            array_push($diagonal_positions, $moving_coordinate_string);
        }

        //try to move down right
        $moving_coordinate_array[0] = $queen_coordinate_array[0];
        $moving_coordinate_array[1] = $queen_coordinate_array[1];
        while ($moving_coordinate_array[0] != "H" && $moving_coordinate_array[1] != "1") {
            $moving_coordinate_array[0] = move($moving_coordinate_array[0], "right");
            $moving_coordinate_array[1] = move($moving_coordinate_array[1], "down");
            $moving_coordinate_string = implode("", $moving_coordinate_array);
            array_push($diagonal_positions, $moving_coordinate_string);
        }


        //try to move up left
        $moving_coordinate_array[0] = $queen_coordinate_array[0];
        $moving_coordinate_array[1] = $queen_coordinate_array[1];
        while ($moving_coordinate_array[0] != "A" && $moving_coordinate_array[1] != "8") {
            $moving_coordinate_array[0] = move($moving_coordinate_array[0], "left");
            $moving_coordinate_array[1] = move($moving_coordinate_array[1], "up");
            $moving_coordinate_string = implode("", $moving_coordinate_array);
            array_push($diagonal_positions, $moving_coordinate_string);
        }

        //try to move up right
        $moving_coordinate_array[0] = $queen_coordinate_array[0];
        $moving_coordinate_array[1] = $queen_coordinate_array[1];
        while ($moving_coordinate_array[0] != "H" && $moving_coordinate_array[1] != "8") {
            $moving_coordinate_array[0] = move($moving_coordinate_array[0], "right");
            $moving_coordinate_array[1] = move($moving_coordinate_array[1], "up");
            $moving_coordinate_string = implode("", $moving_coordinate_array);
            array_push($diagonal_positions, $moving_coordinate_string);
        }
        foreach ($diagonal_positions as $position) {
            if ($piece_location == $position) { //one of the diagonal positions match the piece location
                return true;
            }
        }

        return false;
    }
} //end is_able_to_attack()


function move($coordinate, $direction) {
    $ascii_coord = ord($coordinate);

    if ($direction == "down" || $direction == "left") {$ascii_coord--;}
    else if ($direction == "up" || $direction == "right") {$ascii_coord++;}
    else {return false;} //this should not return

    $coordinate = chr($ascii_coord);
    return $coordinate;
}
